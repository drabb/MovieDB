#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MovieDB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="moviedb")]
	public partial class MovieDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActor(Actor instance);
    partial void UpdateActor(Actor instance);
    partial void DeleteActor(Actor instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertMovieActor(MovieActor instance);
    partial void UpdateMovieActor(MovieActor instance);
    partial void DeleteMovieActor(MovieActor instance);
    partial void InsertDirector(Director instance);
    partial void UpdateDirector(Director instance);
    partial void DeleteDirector(Director instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    #endregion
		
		public MovieDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["moviedbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Actor> Actors
		{
			get
			{
				return this.GetTable<Actor>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<MovieActor> MovieActors
		{
			get
			{
				return this.GetTable<MovieActor>();
			}
		}
		
		public System.Data.Linq.Table<Director> Directors
		{
			get
			{
				return this.GetTable<Director>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movies
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<Rating> Ratings
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
		
		[Function(Name="dbo.movie_search")]
		public ISingleResult<movie_searchResult> MovieSearch([Parameter(DbType="VarChar(512)")] string movie_title, [Parameter(DbType="Int")] System.Nullable<int> genre_id, [Parameter(DbType="Int")] System.Nullable<int> rating_id, [Parameter(DbType="Int")] System.Nullable<int> director_id, [Parameter(DbType="Int")] System.Nullable<int> location_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), movie_title, genre_id, rating_id, director_id, location_id);
			return ((ISingleResult<movie_searchResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.actor")]
	public partial class Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _actor_id;
		
		private string _fname;
		
		private string _lname;
		
		private EntitySet<MovieActor> _MovieActors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onactor_idChanging(int value);
    partial void Onactor_idChanged();
    partial void OnfnameChanging(string value);
    partial void OnfnameChanged();
    partial void OnlnameChanging(string value);
    partial void OnlnameChanged();
    #endregion
		
		public Actor()
		{
			this._MovieActors = new EntitySet<MovieActor>(new Action<MovieActor>(this.attach_MovieActors), new Action<MovieActor>(this.detach_MovieActors));
			OnCreated();
		}
		
		[Column(Storage="_actor_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int actor_id
		{
			get
			{
				return this._actor_id;
			}
			set
			{
				if ((this._actor_id != value))
				{
					this.Onactor_idChanging(value);
					this.SendPropertyChanging();
					this._actor_id = value;
					this.SendPropertyChanged("actor_id");
					this.Onactor_idChanged();
				}
			}
		}
		
		[Column(Storage="_fname", DbType="VarChar(128)")]
		public string fname
		{
			get
			{
				return this._fname;
			}
			set
			{
				if ((this._fname != value))
				{
					this.OnfnameChanging(value);
					this.SendPropertyChanging();
					this._fname = value;
					this.SendPropertyChanged("fname");
					this.OnfnameChanged();
				}
			}
		}
		
		[Column(Storage="_lname", DbType="VarChar(128)")]
		public string lname
		{
			get
			{
				return this._lname;
			}
			set
			{
				if ((this._lname != value))
				{
					this.OnlnameChanging(value);
					this.SendPropertyChanging();
					this._lname = value;
					this.SendPropertyChanged("lname");
					this.OnlnameChanged();
				}
			}
		}
		
		[Association(Name="Actor_MovieActor", Storage="_MovieActors", ThisKey="actor_id", OtherKey="actor_id")]
		public EntitySet<MovieActor> MovieActors
		{
			get
			{
				return this._MovieActors;
			}
			set
			{
				this._MovieActors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
	}
	
	[Table(Name="dbo.location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _location_id;
		
		private string _location_name;
		
		private string _location_desc;
		
		private System.Nullable<int> _location_size;
		
		private EntitySet<Movie> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onlocation_idChanging(int value);
    partial void Onlocation_idChanged();
    partial void Onlocation_nameChanging(string value);
    partial void Onlocation_nameChanged();
    partial void Onlocation_descChanging(string value);
    partial void Onlocation_descChanged();
    partial void Onlocation_sizeChanging(System.Nullable<int> value);
    partial void Onlocation_sizeChanged();
    #endregion
		
		public Location()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			OnCreated();
		}
		
		[Column(Storage="_location_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int location_id
		{
			get
			{
				return this._location_id;
			}
			set
			{
				if ((this._location_id != value))
				{
					this.Onlocation_idChanging(value);
					this.SendPropertyChanging();
					this._location_id = value;
					this.SendPropertyChanged("location_id");
					this.Onlocation_idChanged();
				}
			}
		}
		
		[Column(Storage="_location_name", DbType="VarChar(128)")]
		public string location_name
		{
			get
			{
				return this._location_name;
			}
			set
			{
				if ((this._location_name != value))
				{
					this.Onlocation_nameChanging(value);
					this.SendPropertyChanging();
					this._location_name = value;
					this.SendPropertyChanged("location_name");
					this.Onlocation_nameChanged();
				}
			}
		}
		
		[Column(Storage="_location_desc", DbType="VarChar(1024)")]
		public string location_desc
		{
			get
			{
				return this._location_desc;
			}
			set
			{
				if ((this._location_desc != value))
				{
					this.Onlocation_descChanging(value);
					this.SendPropertyChanging();
					this._location_desc = value;
					this.SendPropertyChanged("location_desc");
					this.Onlocation_descChanged();
				}
			}
		}
		
		[Column(Storage="_location_size", DbType="Int")]
		public System.Nullable<int> location_size
		{
			get
			{
				return this._location_size;
			}
			set
			{
				if ((this._location_size != value))
				{
					this.Onlocation_sizeChanging(value);
					this.SendPropertyChanging();
					this._location_size = value;
					this.SendPropertyChanged("location_size");
					this.Onlocation_sizeChanged();
				}
			}
		}
		
		[Association(Name="Location_Movie", Storage="_Movies", ThisKey="location_id", OtherKey="location_id")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[Table(Name="dbo.genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _genre_id;
		
		private string _genre_name;
		
		private string _genre_desc;
		
		private EntitySet<Movie> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongenre_idChanging(int value);
    partial void Ongenre_idChanged();
    partial void Ongenre_nameChanging(string value);
    partial void Ongenre_nameChanged();
    partial void Ongenre_descChanging(string value);
    partial void Ongenre_descChanged();
    #endregion
		
		public Genre()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			OnCreated();
		}
		
		[Column(Storage="_genre_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int genre_id
		{
			get
			{
				return this._genre_id;
			}
			set
			{
				if ((this._genre_id != value))
				{
					this.Ongenre_idChanging(value);
					this.SendPropertyChanging();
					this._genre_id = value;
					this.SendPropertyChanged("genre_id");
					this.Ongenre_idChanged();
				}
			}
		}
		
		[Column(Storage="_genre_name", DbType="VarChar(128)")]
		public string genre_name
		{
			get
			{
				return this._genre_name;
			}
			set
			{
				if ((this._genre_name != value))
				{
					this.Ongenre_nameChanging(value);
					this.SendPropertyChanging();
					this._genre_name = value;
					this.SendPropertyChanged("genre_name");
					this.Ongenre_nameChanged();
				}
			}
		}
		
		[Column(Storage="_genre_desc", DbType="VarChar(1024)")]
		public string genre_desc
		{
			get
			{
				return this._genre_desc;
			}
			set
			{
				if ((this._genre_desc != value))
				{
					this.Ongenre_descChanging(value);
					this.SendPropertyChanging();
					this._genre_desc = value;
					this.SendPropertyChanged("genre_desc");
					this.Ongenre_descChanged();
				}
			}
		}
		
		[Association(Name="Genre_Movie", Storage="_Movies", ThisKey="genre_id", OtherKey="genre_id")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[Table(Name="dbo.movie_actor")]
	public partial class MovieActor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movie_id;
		
		private int _actor_id;
		
		private EntityRef<Actor> _Actor;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmovie_idChanging(int value);
    partial void Onmovie_idChanged();
    partial void Onactor_idChanging(int value);
    partial void Onactor_idChanged();
    #endregion
		
		public MovieActor()
		{
			this._Actor = default(EntityRef<Actor>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[Column(Storage="_movie_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int movie_id
		{
			get
			{
				return this._movie_id;
			}
			set
			{
				if ((this._movie_id != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmovie_idChanging(value);
					this.SendPropertyChanging();
					this._movie_id = value;
					this.SendPropertyChanged("movie_id");
					this.Onmovie_idChanged();
				}
			}
		}
		
		[Column(Storage="_actor_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int actor_id
		{
			get
			{
				return this._actor_id;
			}
			set
			{
				if ((this._actor_id != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onactor_idChanging(value);
					this.SendPropertyChanging();
					this._actor_id = value;
					this.SendPropertyChanged("actor_id");
					this.Onactor_idChanged();
				}
			}
		}
		
		[Association(Name="Actor_MovieActor", Storage="_Actor", ThisKey="actor_id", OtherKey="actor_id", IsForeignKey=true)]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.MovieActors.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.MovieActors.Add(this);
						this._actor_id = value.actor_id;
					}
					else
					{
						this._actor_id = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		[Association(Name="Movie_MovieActor", Storage="_Movie", ThisKey="movie_id", OtherKey="movie_id", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.MovieActors.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.MovieActors.Add(this);
						this._movie_id = value.movie_id;
					}
					else
					{
						this._movie_id = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.director")]
	public partial class Director : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _director_id;
		
		private string _fname;
		
		private string _lname;
		
		private EntitySet<Movie> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondirector_idChanging(int value);
    partial void Ondirector_idChanged();
    partial void OnfnameChanging(string value);
    partial void OnfnameChanged();
    partial void OnlnameChanging(string value);
    partial void OnlnameChanged();
    #endregion
		
		public Director()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			OnCreated();
		}
		
		[Column(Storage="_director_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int director_id
		{
			get
			{
				return this._director_id;
			}
			set
			{
				if ((this._director_id != value))
				{
					this.Ondirector_idChanging(value);
					this.SendPropertyChanging();
					this._director_id = value;
					this.SendPropertyChanged("director_id");
					this.Ondirector_idChanged();
				}
			}
		}
		
		[Column(Storage="_fname", DbType="VarChar(128)")]
		public string fname
		{
			get
			{
				return this._fname;
			}
			set
			{
				if ((this._fname != value))
				{
					this.OnfnameChanging(value);
					this.SendPropertyChanging();
					this._fname = value;
					this.SendPropertyChanged("fname");
					this.OnfnameChanged();
				}
			}
		}
		
		[Column(Storage="_lname", DbType="VarChar(128)")]
		public string lname
		{
			get
			{
				return this._lname;
			}
			set
			{
				if ((this._lname != value))
				{
					this.OnlnameChanging(value);
					this.SendPropertyChanging();
					this._lname = value;
					this.SendPropertyChanged("lname");
					this.OnlnameChanged();
				}
			}
		}
		
		[Association(Name="Director_Movie", Storage="_Movies", ThisKey="director_id", OtherKey="director_id")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Director = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Director = null;
		}
	}
	
	[Table(Name="dbo.movie")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movie_id;
		
		private string _title;
		
		private System.Nullable<int> _year;
		
		private System.Nullable<int> _length;
		
		private System.Nullable<int> _genre_id;
		
		private System.Nullable<int> _rating_id;
		
		private System.Nullable<int> _director_id;
		
		private System.Nullable<int> _location_id;
		
		private EntitySet<MovieActor> _MovieActors;
		
		private EntityRef<Director> _Director;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Rating> _Rating;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmovie_idChanging(int value);
    partial void Onmovie_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnyearChanging(System.Nullable<int> value);
    partial void OnyearChanged();
    partial void OnlengthChanging(System.Nullable<int> value);
    partial void OnlengthChanged();
    partial void Ongenre_idChanging(System.Nullable<int> value);
    partial void Ongenre_idChanged();
    partial void Onrating_idChanging(System.Nullable<int> value);
    partial void Onrating_idChanged();
    partial void Ondirector_idChanging(System.Nullable<int> value);
    partial void Ondirector_idChanged();
    partial void Onlocation_idChanging(System.Nullable<int> value);
    partial void Onlocation_idChanged();
    #endregion
		
		public Movie()
		{
			this._MovieActors = new EntitySet<MovieActor>(new Action<MovieActor>(this.attach_MovieActors), new Action<MovieActor>(this.detach_MovieActors));
			this._Director = default(EntityRef<Director>);
			this._Genre = default(EntityRef<Genre>);
			this._Location = default(EntityRef<Location>);
			this._Rating = default(EntityRef<Rating>);
			OnCreated();
		}
		
		[Column(Storage="_movie_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int movie_id
		{
			get
			{
				return this._movie_id;
			}
			set
			{
				if ((this._movie_id != value))
				{
					this.Onmovie_idChanging(value);
					this.SendPropertyChanging();
					this._movie_id = value;
					this.SendPropertyChanged("movie_id");
					this.Onmovie_idChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="VarChar(512)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_year", DbType="Int")]
		public System.Nullable<int> year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[Column(Storage="_length", DbType="Int")]
		public System.Nullable<int> length
		{
			get
			{
				return this._length;
			}
			set
			{
				if ((this._length != value))
				{
					this.OnlengthChanging(value);
					this.SendPropertyChanging();
					this._length = value;
					this.SendPropertyChanged("length");
					this.OnlengthChanged();
				}
			}
		}
		
		[Column(Storage="_genre_id", DbType="Int")]
		public System.Nullable<int> genre_id
		{
			get
			{
				return this._genre_id;
			}
			set
			{
				if ((this._genre_id != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongenre_idChanging(value);
					this.SendPropertyChanging();
					this._genre_id = value;
					this.SendPropertyChanged("genre_id");
					this.Ongenre_idChanged();
				}
			}
		}
		
		[Column(Storage="_rating_id", DbType="Int")]
		public System.Nullable<int> rating_id
		{
			get
			{
				return this._rating_id;
			}
			set
			{
				if ((this._rating_id != value))
				{
					if (this._Rating.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrating_idChanging(value);
					this.SendPropertyChanging();
					this._rating_id = value;
					this.SendPropertyChanged("rating_id");
					this.Onrating_idChanged();
				}
			}
		}
		
		[Column(Storage="_director_id", DbType="Int")]
		public System.Nullable<int> director_id
		{
			get
			{
				return this._director_id;
			}
			set
			{
				if ((this._director_id != value))
				{
					if (this._Director.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondirector_idChanging(value);
					this.SendPropertyChanging();
					this._director_id = value;
					this.SendPropertyChanged("director_id");
					this.Ondirector_idChanged();
				}
			}
		}
		
		[Column(Storage="_location_id", DbType="Int")]
		public System.Nullable<int> location_id
		{
			get
			{
				return this._location_id;
			}
			set
			{
				if ((this._location_id != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlocation_idChanging(value);
					this.SendPropertyChanging();
					this._location_id = value;
					this.SendPropertyChanged("location_id");
					this.Onlocation_idChanged();
				}
			}
		}
		
		[Association(Name="Movie_MovieActor", Storage="_MovieActors", ThisKey="movie_id", OtherKey="movie_id")]
		public EntitySet<MovieActor> MovieActors
		{
			get
			{
				return this._MovieActors;
			}
			set
			{
				this._MovieActors.Assign(value);
			}
		}
		
		[Association(Name="Director_Movie", Storage="_Director", ThisKey="director_id", OtherKey="director_id", IsForeignKey=true)]
		public Director Director
		{
			get
			{
				return this._Director.Entity;
			}
			set
			{
				Director previousValue = this._Director.Entity;
				if (((previousValue != value) 
							|| (this._Director.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Director.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Director.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._director_id = value.director_id;
					}
					else
					{
						this._director_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Director");
				}
			}
		}
		
		[Association(Name="Genre_Movie", Storage="_Genre", ThisKey="genre_id", OtherKey="genre_id", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._genre_id = value.genre_id;
					}
					else
					{
						this._genre_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[Association(Name="Location_Movie", Storage="_Location", ThisKey="location_id", OtherKey="location_id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._location_id = value.location_id;
					}
					else
					{
						this._location_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[Association(Name="Rating_Movie", Storage="_Rating", ThisKey="rating_id", OtherKey="rating_id", IsForeignKey=true)]
		public Rating Rating
		{
			get
			{
				return this._Rating.Entity;
			}
			set
			{
				Rating previousValue = this._Rating.Entity;
				if (((previousValue != value) 
							|| (this._Rating.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rating.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Rating.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._rating_id = value.rating_id;
					}
					else
					{
						this._rating_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rating");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
	}
	
	[Table(Name="dbo.rating")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rating_id;
		
		private string _rating_name;
		
		private string _rating_desc;
		
		private EntitySet<Movie> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrating_idChanging(int value);
    partial void Onrating_idChanged();
    partial void Onrating_nameChanging(string value);
    partial void Onrating_nameChanged();
    partial void Onrating_descChanging(string value);
    partial void Onrating_descChanged();
    #endregion
		
		public Rating()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			OnCreated();
		}
		
		[Column(Storage="_rating_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rating_id
		{
			get
			{
				return this._rating_id;
			}
			set
			{
				if ((this._rating_id != value))
				{
					this.Onrating_idChanging(value);
					this.SendPropertyChanging();
					this._rating_id = value;
					this.SendPropertyChanged("rating_id");
					this.Onrating_idChanged();
				}
			}
		}
		
		[Column(Storage="_rating_name", DbType="VarChar(50)")]
		public string rating_name
		{
			get
			{
				return this._rating_name;
			}
			set
			{
				if ((this._rating_name != value))
				{
					this.Onrating_nameChanging(value);
					this.SendPropertyChanging();
					this._rating_name = value;
					this.SendPropertyChanged("rating_name");
					this.Onrating_nameChanged();
				}
			}
		}
		
		[Column(Storage="_rating_desc", DbType="VarChar(512)")]
		public string rating_desc
		{
			get
			{
				return this._rating_desc;
			}
			set
			{
				if ((this._rating_desc != value))
				{
					this.Onrating_descChanging(value);
					this.SendPropertyChanging();
					this._rating_desc = value;
					this.SendPropertyChanged("rating_desc");
					this.Onrating_descChanged();
				}
			}
		}
		
		[Association(Name="Rating_Movie", Storage="_Movies", ThisKey="rating_id", OtherKey="rating_id")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Rating = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Rating = null;
		}
	}
	
	public partial class movie_searchResult
	{
		
		private int _movie_id;
		
		private string _title;
		
		private System.Nullable<int> _year;
		
		private System.Nullable<int> _length;
		
		private System.Nullable<int> _genre_id;
		
		private string _genre_name;
		
		private System.Nullable<int> _rating_id;
		
		private string _rating_name;
		
		private System.Nullable<int> _director_id;
		
		private string _director;
		
		private System.Nullable<int> _location_id;
		
		private string _location;
		
		public movie_searchResult()
		{
		}
		
		[Column(Storage="_movie_id", DbType="Int NOT NULL")]
		public int movie_id
		{
			get
			{
				return this._movie_id;
			}
			set
			{
				if ((this._movie_id != value))
				{
					this._movie_id = value;
				}
			}
		}
		
		[Column(Storage="_title", DbType="VarChar(512)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this._title = value;
				}
			}
		}
		
		[Column(Storage="_year", DbType="Int")]
		public System.Nullable<int> year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this._year = value;
				}
			}
		}
		
		[Column(Storage="_length", DbType="Int")]
		public System.Nullable<int> length
		{
			get
			{
				return this._length;
			}
			set
			{
				if ((this._length != value))
				{
					this._length = value;
				}
			}
		}
		
		[Column(Storage="_genre_id", DbType="Int")]
		public System.Nullable<int> genre_id
		{
			get
			{
				return this._genre_id;
			}
			set
			{
				if ((this._genre_id != value))
				{
					this._genre_id = value;
				}
			}
		}
		
		[Column(Storage="_genre_name", DbType="VarChar(128)")]
		public string genre_name
		{
			get
			{
				return this._genre_name;
			}
			set
			{
				if ((this._genre_name != value))
				{
					this._genre_name = value;
				}
			}
		}
		
		[Column(Storage="_rating_id", DbType="Int")]
		public System.Nullable<int> rating_id
		{
			get
			{
				return this._rating_id;
			}
			set
			{
				if ((this._rating_id != value))
				{
					this._rating_id = value;
				}
			}
		}
		
		[Column(Storage="_rating_name", DbType="VarChar(50)")]
		public string rating_name
		{
			get
			{
				return this._rating_name;
			}
			set
			{
				if ((this._rating_name != value))
				{
					this._rating_name = value;
				}
			}
		}
		
		[Column(Storage="_director_id", DbType="Int")]
		public System.Nullable<int> director_id
		{
			get
			{
				return this._director_id;
			}
			set
			{
				if ((this._director_id != value))
				{
					this._director_id = value;
				}
			}
		}
		
		[Column(Storage="_director", DbType="VarChar(258)")]
		public string director
		{
			get
			{
				return this._director;
			}
			set
			{
				if ((this._director != value))
				{
					this._director = value;
				}
			}
		}
		
		[Column(Storage="_location_id", DbType="Int")]
		public System.Nullable<int> location_id
		{
			get
			{
				return this._location_id;
			}
			set
			{
				if ((this._location_id != value))
				{
					this._location_id = value;
				}
			}
		}
		
		[Column(Storage="_location", DbType="VarChar(128)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this._location = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
